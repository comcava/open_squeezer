group 'com.example.native_opencv'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.6.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    } 
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        // main.java.srcDirs += 'src/main/kotlin'
        main.jniLibs.srcDirs = ["libs"]
    }

    defaultConfig {
        minSdkVersion 16

        externalNativeBuild {
            cmake {
                // Enabling exceptions, RTTI
                // And setting C++ standard version
                cppFlags '-frtti -fexceptions -std=c++11'
                
                // Shared runtime for shared libraries
                arguments "-DANDROID_STL=c++_shared"
            
            }
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

// task conanInstall { 
//     def buildDir = new File("../../plugins/native_opencv/android/conan_build")
//     buildDir.mkdirs()
//     // if you have problems running the command try to specify the absolute
//     // path to conan (Known problem in MacOSX) /usr/local/bin/conan
//     def cmmd = "conan install ../conanfile.txt --build missing --profile android"
//     print(">> ${cmmd} \n")

//     def sout = new StringBuilder(), serr = new StringBuilder()
//     def proc = cmmd.execute(null, buildDir)
//     proc.consumeProcessOutput(sout, serr)
//     proc.waitFor()
//     println "$sout $serr"
//     if(proc.exitValue() != 0){
//         throw new Exception("out> $sout err> $serr" + "\nCommand: ${cmmd}")
//     }
// }


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
